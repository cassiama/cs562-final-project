import subprocess


def main():
    """
    This is the generator code. It should take in the MF structure and generate the code
    needed to run the query. That generated code should be saved to a 
    file (e.g. _generated.py) and then run.
    """

    n = 1
    filepath = f'./q{n}.txt'
    ere = []
    with open(filepath, "r") as f:
        ere = f.read().splitlines()

    mf_struct = {}
    print(ere)
    for i, l in enumerate(ere):
        if l == "SELECT ATTRIBUTE(S):":
            select_attr = ere[i+1].split(",")
            print(f"S: {select_attr}")
        if l == "NUMBER OF GROUPING VARIABLES(n):":
            n = int(ere[i+1])
            print(f"n: {n}")
        if l == "GROUPING ATTRIBUTES(V):":
            group_attr = ere[i+1].split(",")
            print(f"V: {group_attr}")
        if l == "F-VECT([F]):":
            aggregates = ere[i+1].split(",")
            print(f"F: {aggregates}")
        if l == "SELECT CONDITION-VECT([C]):":
            select_conds = []
            curr_line = l
            while curr_line != "HAVING CLAUSE (G):":
                i += 1
                curr_line = ere[i+1]
                select_conds.append(curr_line)
            print(f"C: {select_conds}")
        # if l == "HAVING CLAUSE (G):":
        #     having_conds = []
        #     curr_line = l
        #     while curr_line != "":


    '''
    While(1) {
        Read(row)
        If (row.cust in mf_struct) {
            Update aggregates in mf_struct
        } else {
            Add row.cust to mf_struct
            Initialize the aggregate
        }
    }
    Output mf_struct
    '''

    body = """
    for row in cur:
        if row['quant'] > 10:
            _global.append(row)
    """

    # Note: The f allows formatting with variables.
    #       Also, note the indentation is preserved.
    tmp = f"""
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    user = os.getenv('USER')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor)
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    _global = []
    {body}
    
    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    """

    # Write the generated code to a file
    open("_generated.py", "w").write(tmp)
    # Execute the generated code
    subprocess.run(["python", "_generated.py"])


if "__main__" == __name__:
    main()
